generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =======================
// USERS
// =======================

model User {
  id           String        @id @default(uuid()) @db.Uuid
  type         UserType
  email        String?       @unique
  phones       Phone[]
  addresses    Address[]
  accesses     UserAccess[] 
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?
  anonymizedAt DateTime?

  individual   Individual?
  company      Company?
  customer     Customer?
  supplier     Supplier?
}


model Individual {
  userId        String   @id @db.Uuid
  user          User     @relation(fields: [userId], references: [id])
  cpf           String   @unique
  fullName      String
  birthDate     DateTime?
  deletedAt     DateTime?
  anonymizedAt  DateTime?
}

model Company {
  userId            String   @id @db.Uuid
  user              User     @relation(fields: [userId], references: [id])
  cnpj              String   @unique
  legalName         String
  tradeName         String?
  stateRegistration String?
  deletedAt         DateTime?
}

model Customer {
  userId         String   @id @db.Uuid
  user           User     @relation(fields: [userId], references: [id])
  deletedAt      DateTime?
  sales          Sale[]
  customerPrices CustomerProductPrice[]
  billingPlans   BillingPlan[]
}

model Supplier {
  userId          String            @id @db.Uuid
  user            User              @relation(fields: [userId], references: [id])
  deletedAt       DateTime?
  supplies        SupplyReceipt[]
}

// =======================
// CONTACT
// =======================
model Address {
  id         String   @id @default(uuid()) @db.Uuid
  userId     String   @db.Uuid
  street     String
  number     String
  district   String
  city       String
  state      String
  postalCode String
  country    String
  isPrimary  Boolean  @default(false)
  user       User     @relation(fields: [userId], references: [id])
}

enum PhoneType {
  FIXED
  MOBILE
}

model Phone {
  id         String   @id @default(uuid()) @db.Uuid
  userId     String   @db.Uuid
  areaCode   String
  number     String
  isPrimary  Boolean  @default(false)
  isWhatsapp Boolean  @default(false)
  type       PhoneType
  user       User     @relation(fields: [userId], references: [id])
}

// =======================
// PRODUCTS & SALES
// =======================
model Product {
  id              String     @id @default(uuid()) @db.Uuid
  name            String
  description     String?
  price           Decimal    @db.Decimal(10,4)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  deletedAt       DateTime?
  sales           Sale[]
  customerPrices  CustomerProductPrice[]
  billingPlans    BillingPlan[]
}

model CustomerProductPrice {
  id          String    @id @default(uuid()) @db.Uuid
  customerId  String    @db.Uuid
  productId   String    @db.Uuid
  price       Decimal   @db.Decimal(10,4)
  createdAt   DateTime  @default(now())

  customer    Customer  @relation(fields: [customerId], references: [userId])
  product     Product   @relation(fields: [productId], references: [id])

  @@unique([customerId, productId])
}

model Sale {
  id             String    @id @default(uuid()) @db.Uuid
  productId      String    @db.Uuid
  customerId     String    @db.Uuid
  quantity       Int
  unitPrice      Decimal   @db.Decimal(10,4)
  totalPrice     Decimal   @db.Decimal(10,4)
  saleDate       DateTime
  receiptFileKey String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?

  product        Product   @relation(fields: [productId], references: [id])
  customer       Customer  @relation(fields: [customerId], references: [userId])
  receivables    AccountReceivable[]
}

// =======================
// INVENTORY & WAREHOUSE
// =======================
model InventoryWarehouseItem {
  id          String    @id @default(uuid()) @db.Uuid
  name        String
  description String?
  minQuantity Decimal?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  inventories Inventory[]
  warehouses  Warehouse[]
  supplyTypes SupplyType[]
}

model Inventory {
  id        String                 @id @default(uuid()) @db.Uuid
  itemId    String                 @db.Uuid
  quantity  Decimal                @default(0)
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt

  item      InventoryWarehouseItem @relation(fields: [itemId], references: [id])
}

model Warehouse {
  id         String                 @id @default(uuid()) @db.Uuid
  itemId     String                 @db.Uuid
  quantity   Decimal                @default(0)
  description String?
  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @updatedAt

  item       InventoryWarehouseItem @relation(fields: [itemId], references: [id])
}

model SupplyType {
  id       String           @id @default(uuid()) @db.Uuid
  itemId   String           @db.Uuid
  supplies SupplyReceipt[]

  item     InventoryWarehouseItem @relation(fields: [itemId], references: [id])
}

model SupplyReceipt {
  id              String            @id @default(uuid()) @db.Uuid
  supplierId      String            @db.Uuid
  supplyTypeId    String            @db.Uuid
  receivedDate    DateTime
  quantity        Int
  unitPrice       Decimal           @db.Decimal(10,4)
  totalPrice      Decimal           @db.Decimal(10,4)
  createdAt       DateTime          @default(now())
  deletedAt       DateTime?
  supplier        Supplier          @relation(fields: [supplierId], references: [userId])
  supplyType      SupplyType        @relation(fields: [supplyTypeId], references: [id])
  accountPayables AccountPayable[]
}

// =======================
// ACCOUNT PAYABLE (NOVO)
// =======================

enum AccountPayableStatus {
  PENDING
  PAID
  OVERDUE
}

model AccountPayable {
  id                     String       @id @default(uuid()) @db.Uuid
  description            String
  totalValue             Decimal      @db.Decimal(10,2)
  dueDate                DateTime
  status                 AccountPayableStatus @default(PENDING)
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
  deletedAt              DateTime?

  expenseId             String?       @db.Uuid
  expense               Expense?      @relation(fields: [expenseId], references: [id])

  supplyReceiptId       String?       @db.Uuid
  supplyReceipt         SupplyReceipt?@relation(fields: [supplyReceiptId], references: [id])

  paymentDate           DateTime?
  paymentReceiptFileKey String?
}


// =======================
// EXPENSE
// =======================

model ExpenseType {
  id          String     @id @default(uuid()) @db.Uuid
  name        String     @unique
  description String?

  expenses    Expense[]
}


model Expense {
  id             String       @id @default(uuid()) @db.Uuid
  expenseTypeId  String       @db.Uuid
  description    String
  totalValue     Decimal      @db.Decimal(10,2)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  receiptFileKey  String?

  expenseType    ExpenseType  @relation(fields: [expenseTypeId], references: [id])
  accountPayables AccountPayable[]
}

// =======================
// BILLING & INVOICES
// =======================
enum BillingCycle {
  DAILY
  MONTHLY
  WEEKLY
}

model BillingPlan {
  id          String       @id @default(uuid()) @db.Uuid
  customerId  String       @db.Uuid
  productId   String       @db.Uuid
  cycle       BillingCycle
  startDate   DateTime
  endDate     DateTime?
  dueDay      Int?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  customer    Customer     @relation(fields: [customerId], references: [userId])
  product     Product      @relation(fields: [productId], references: [id])

  @@unique([customerId, productId])
}

enum InvoiceStatus {
  PENDING   
  PARTIAL   
  PAID     
  OVERDUE    
  CANCELLED
}

model Invoice {
  id            String              @id @default(uuid()) @db.Uuid
  periodStart   DateTime
  periodEnd     DateTime
  description   String?
  totalValue    Decimal             @db.Decimal(10,2)
  totalPaid     Decimal?             @default(0) @db.Decimal(10,2)
  dueDate       DateTime
  status        InvoiceStatus       @default(PENDING)
  metadata      Json?

  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  deletedAt     DateTime?

  receivables   AccountReceivable[]  @relation("InvoiceAccounts")
}

enum AccountReceivableStatus {
  PENDING
  RECEIVED
  OVERDUE
}

model AccountReceivable {
  id          String                  @id @default(uuid()) @db.Uuid
  amount      Decimal                 @db.Decimal(10,2)
  status      AccountReceivableStatus @default(PENDING)
  saleId      String?                 @db.Uuid 
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
  expectedDate DateTime?              
  metadata    Json? 

  sale       Sale?                    @relation(fields: [saleId], references: [id])
  invoiceId  String?  @db.Uuid
  invoices   Invoice[]                @relation("InvoiceAccounts")
}

// =======================
// REPORTS
// =======================
enum ReportStatus {
  PROCESSING
  PENDING
  READY
  FAILED
}

enum ReportType {
  DRE_MENSAL
  DRE_ANUAL
  VENDAS_MENSAL_POR_CLIENTE
  VENDAS_MENSAL_GERAL
  VENDAS_ANUAL_POR_CLIENTE
  VENDAS_ANUAL_GERAL
  ESTOQUE_MENSAL
  ESTOQUE_ANUAL
}

model Report {
  id          String        @id @default(uuid()) @db.Uuid
  name        String
  description String?
  type        ReportType
  status      ReportStatus  @default(PENDING)
  fileKey     String?
  requestedBy String?
  metadata    Json?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime?
}


enum UserType {
  INDIVIDUAL
  COMPANY
}

// =======================
// ACESSO + TOKENS
// =======================

model UserAccess {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  login     String   @unique
  password  String
  role      AccessRole
  status    AccessStatus @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  tokens    UserToken[]
  user      User     @relation(fields: [userId], references: [id])
}

model UserToken {
  id          String   @id @default(uuid()) @db.Uuid
  accessId    String   @db.Uuid
  token       String
  device      String?
  ip          String?
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  revokedAt   DateTime?

  access      UserAccess @relation(fields: [accessId], references: [id])
}

enum AccessRole {
  ADMIN
  SUPPLIER
  CUSTOMER
}

enum AccessStatus {
  ACTIVE
  SUSPENDED
}
